const express = require('express');
const cors = require('cors');
const path = require('path');
const app = express();
const port = 3000;  // –ü–æ—Ä—Ç –¥–ª—è –≤–∞—à–µ–≥–æ Express —Å–µ—Ä–≤–µ—Ä–∞
const axios = require('axios');
const mongoose = require('mongoose');
const multer = require('multer');
const FormData = require('form-data');
const backendServerLink = 'https://majesticgirls.net'



// –í–∫–ª—é—á–∞–µ–º CORS
app.use(cors({
  origin: (origin, callback) => {
    const allowedOrigins = ['https://majesticgirls.net', 'https://t.me', 'https://localhost:8080', 'https://localhost:3000']; // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));


app.use((req, res, next) => {
  res.setHeader("Content-Security-Policy", `
    default-src 'self' https: data:;
    script-src 'self' 'unsafe-inline' 'unsafe-eval' https:;
    connect-src 'self' https://api.telegram.org https://majesticgirls.net;
    img-src 'self' data: https:;
    style-src 'self' 'unsafe-inline';
    font-src 'self' https:;
  `.trim());
  res.setHeader("Strict-Transport-Security", "max-age=31536000; includeSubDomains");
  res.setHeader("X-Content-Type-Options", "nosniff");
  res.setHeader("X-Frame-Options", "SAMEORIGIN");
  res.setHeader("X-XSS-Protection", "1; mode=block");
  next();
});


app.use(express.json());

app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});



const corsOptions = {
  origin: 'http://localhost:8080', // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –¥–æ–º–µ–Ω
  methods: ['GET', 'POST'], // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
};






Object.keys(require.cache).forEach(function(key) {
    delete require.cache[key];
});

const upload = multer({
  storage: multer.memoryStorage(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º memoryStorage, —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png', 'image/gif'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {0
      cb(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'), false);
    }
    }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
const BOT_TOKEN = '7495422433:AAEjsD32grXV6w1fUuWZSRsrPD6KuiwZ5lA';
const CHAT_ID = 'YOUR_CHAT_ID';


app.post('/upload', upload.single('file'), async (req, res) => {
  try {
    const { modelId } = req.body;


    const db = mongoose.connection.db;
    const collection = db.collection('dankets'); 
    const document = await collection.findOne({ _id: Number(modelId) });



    const user = document.user;


    const fileType = req.file.mimetype;

    if (fileType.startsWith('image/')) {
      
      const formData = new FormData();
      formData.append('chat_id', user); 
      formData.append('photo', req.file.buffer, req.file.originalname);
      formData.append('caption', `üì∏ –§–æ—Ç–æ —á–µ–∫–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –º–æ–¥–µ–ª—å: ${document.name} | ${document._id}`);


      const response = await axios.post('https://api.telegram.org/bot7495422433:AAEjsD32grXV6w1fUuWZSRsrPD6KuiwZ5lA/sendPhoto', formData, );


      return res.status(200).json({ message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram', response: response.data });

    } else if (fileType === 'application/pdf') {
      
      const formData = new FormData();
      formData.append('chat_id', user);
      formData.append('document', req.file.buffer, req.file.originalname);
      formData.append('caption', `üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –º–æ–¥–µ–ª–∏: ${document.name} | ${document._id}`);

      const response = await axios.post(`https://api.telegram.org/bot7495422433:AAEjsD32grXV6w1fUuWZSRsrPD6KuiwZ5lA/sendDocument`, formData);

      return res.status(200).json({ message: 'PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram', response: response.data });

    } else {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞' });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', details: error.message });
  }
});





// –ü—Ä–∏–º–µ—Ä API –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/api/message', cors(corsOptions), (req, res) => {
  res.json({ message: '–ü—Ä–∏–≤–µ—Ç –æ—Ç Express!' });
});

mongoose.connect('mongodb://localhost:27017/webesc', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
  .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!'))
  .catch((error) => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error));



// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
app.get('/api/searchByCity', async (req, res) => {
  const { city, skip, limit } = req.query;

  if (!city) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥' });
  }

  const skipNumber = parseInt(skip) || 0;
  const limitNumber = parseInt(limit) || 15;

  try {
    const db = mongoose.connection.db;
    const collection = db.collection('dankets');

    const result = await collection
      .find({ city: city })
      .skip(skipNumber)
      .limit(limitNumber)
      .toArray();

    // –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
    if (result.length > 0) {
      return res.status(200).json({ success: true, data: result });
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∫–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –≥–æ—Ä–æ–¥—É:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});









const API_ENDPOINT = 'http://217.197.107.144:3000';


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç
app.get('/api/cards', cors(corsOptions), async (req, res) => {
    try {
        // –ó–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API
        const response = await axios.get(`${API_ENDPOINT}/getcardslist`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
        res.json(response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç:', error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç' });
    }
});



// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É ID
app.get('/api/search', cors(corsOptions), async (req, res) => {
  const { id } = req.query;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π ID
  if (!id || isNaN(Number(id))) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID' });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ankets
    const db = mongoose.connection.db;
    const collection = db.collection('ankets');

    // –ò—â–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ _id
    let result = await collection.findOne({ _id: parseInt(id) });

    // –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    if (!result) {
      const db = mongoose.connection.db;
      const collection = db.collection('dankets');
      result = await collection.findOne({ _id: parseInt(id) });
    }
    
    // –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –µ—ë —Å—Ç–∞—Ç—É—Å 0
    if (result.status === 0) {
      return res.status(200).json({ success: false, message: '–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞' });
    }



    axios.post('https://api.telegram.org/bot7495422433:AAEjsD32grXV6w1fUuWZSRsrPD6KuiwZ5lA/sendMessage', {
      chat_id: result.user,
      text: `–ö—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–∏—Å–æ–≤–∞–ª—Å—è —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–æ–π ${result.name} | ${result._id}`
    })
    // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
    return res.status(200).json({ success: true, data: result });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


// –†–∞–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã Vue-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ 'dist'
app.use(express.static(path.join(__dirname, 'dist')));

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Vue.js (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è SPA)
app.get('*', cors(corsOptions), (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${backendServerLink}:${port}`);
});
